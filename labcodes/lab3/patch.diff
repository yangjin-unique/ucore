diff --git a/labcodes/lab1/kern/debug/kdebug.c b/labcodes/lab1/kern/debug/kdebug.c
index 27dded0..774c8e8 100644
--- a/labcodes/lab1/kern/debug/kdebug.c
+++ b/labcodes/lab1/kern/debug/kdebug.c
@@ -302,5 +302,18 @@ print_stackframe(void) {
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+    uint32_t ebp = read_ebp(), eip = read_eip();
+    int i = 0;
+
+    for (i = 0; i < STACKFRAME_DEPTH && ebp > 0; i++) {
+        cprintf("ebp = 0x%08x, eip = 0x%08x ", ebp, eip);
+        cprintf("args: 0x%08x, 0x%08x, 0x%08x, 0x%08x", *((uint32_t *)ebp+2), 
+                *((uint32_t *)ebp+3), *((uint32_t *)ebp+4), *((uint32_t *)ebp+5)); 
+        cprintf("\n");
+        print_debuginfo(eip-1);
+        eip = *((uint32_t *)ebp + 1);
+        ebp = *((uint32_t *)ebp);
+    }
+
 }
 
diff --git a/labcodes/lab1/kern/trap/trap.c b/labcodes/lab1/kern/trap/trap.c
index af78676..79c5364 100644
--- a/labcodes/lab1/kern/trap/trap.c
+++ b/labcodes/lab1/kern/trap/trap.c
@@ -46,6 +46,15 @@ idt_init(void) {
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
+    extern uintptr_t __vectors[];
+    int i;
+
+    /* setup idt table entries */
+    for (i = 0; i < sizeof(idt)/sizeof(idt[0]); i++) {
+        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
+    }
+    /* load idt table */
+    lidt(&idt_pd);
 }
 
 static const char *
@@ -134,6 +143,8 @@ print_regs(struct pushregs *regs) {
     cprintf("  eax  0x%08x\n", regs->reg_eax);
 }
 
+struct trapframe switchk2u, *switchu2k;
+
 /* trap_dispatch - dispatch based on what type of trap occurred */
 static void
 trap_dispatch(struct trapframe *tf) {
@@ -147,6 +158,9 @@ trap_dispatch(struct trapframe *tf) {
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
+        ticks++;
+        if (ticks % 100 == 0)
+            print_ticks();
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
diff --git a/labcodes/lab1/tools/gdbinit b/labcodes/lab1/tools/gdbinit
index abf6161..7d6473f 100644
--- a/labcodes/lab1/tools/gdbinit
+++ b/labcodes/lab1/tools/gdbinit
@@ -1,4 +1,5 @@
 file bin/kernel
 target remote :1234
-break kern_init
-continue
\ No newline at end of file
+b *0x7c00
+continue
+x /2i $pc
diff --git a/labcodes/lab2/kern/debug/kdebug.c b/labcodes/lab2/kern/debug/kdebug.c
index 3490231..b517079 100644
--- a/labcodes/lab2/kern/debug/kdebug.c
+++ b/labcodes/lab2/kern/debug/kdebug.c
@@ -305,5 +305,18 @@ print_stackframe(void) {
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+    uint32_t ebp = read_ebp(), eip = read_eip();
+    int i = 0;
+
+    for (i = 0; i < STACKFRAME_DEPTH && ebp > 0; i++) {
+        cprintf("ebp = 0x%08x, eip = 0x%08x ", ebp, eip);
+        cprintf("args: 0x%08x, 0x%08x, 0x%08x, 0x%08x", *((uint32_t *)ebp+2), 
+                *((uint32_t *)ebp+3), *((uint32_t *)ebp+4), *((uint32_t *)ebp+5)); 
+        cprintf("\n");
+        print_debuginfo(eip-1);
+        eip = *((uint32_t *)ebp + 1);
+        ebp = *((uint32_t *)ebp);
+    }
+
 }
 
diff --git a/labcodes/lab2/kern/mm/default_pmm.c b/labcodes/lab2/kern/mm/default_pmm.c
index 770a30f..387108a 100644
--- a/labcodes/lab2/kern/mm/default_pmm.c
+++ b/labcodes/lab2/kern/mm/default_pmm.c
@@ -72,51 +72,97 @@ default_init_memmap(struct Page *base, size_t n) {
     for (; p != base + n; p ++) {
         assert(PageReserved(p));
         p->flags = p->property = 0;
+        SetPageProperty(p);
         set_page_ref(p, 0);
+        list_add_before(&free_list, &p->page_link);
     }
     base->property = n;
-    SetPageProperty(base);
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
 }
 
 static struct Page *
 default_alloc_pages(size_t n) {
+    
+    struct Page *p = NULL;
+    list_entry_t *le = &free_list; 
+    list_entry_t *nle = NULL;
+
     assert(n > 0);
     if (n > nr_free) {
         return NULL;
     }
-    struct Page *page = NULL;
-    list_entry_t *le = &free_list;
+
     while ((le = list_next(le)) != &free_list) {
-        struct Page *p = le2page(le, page_link);
+        p = le2page(le, page_link);
         if (p->property >= n) {
-            page = p;
-            break;
+            int i;
+            for (i = 0; i < n; i++) {
+                nle = list_next(le);
+                struct Page *pp = le2page(le, page_link);
+                SetPageReserved(pp);
+                ClearPageProperty(pp);
+                list_del(le);
+                le = nle;
+            }
+
+            if (p->property > n) {
+                (le2page(le, page_link))->property = p->property - n;
+            }
+            ClearPageProperty(p);
+            SetPageReserved(p);
+            nr_free -= n;
+            return p;
         }
     }
-    if (page != NULL) {
-        list_del(&(page->page_link));
-        if (page->property > n) {
-            struct Page *p = page + n;
-            p->property = page->property - n;
-            list_add(&free_list, &(p->page_link));
-    }
-        nr_free -= n;
-        ClearPageProperty(page);
-    }
-    return page;
+    return NULL;
 }
 
 static void
 default_free_pages(struct Page *base, size_t n) {
     assert(n > 0);
-    struct Page *p = base;
-    for (; p != base + n; p ++) {
-        assert(!PageReserved(p) && !PageProperty(p));
-        p->flags = 0;
-        set_page_ref(p, 0);
+    struct Page *p;
+    list_entry_t *le = &free_list;
+
+    while ((le = list_next(le)) != &free_list) {
+        p = le2page(le, page_link);
+        if (p > base)
+            break;
+    }
+
+    /* add all pages to free list */
+    for (p = base; p < base + n; p++) {
+        //assert(!PageReserved(p) && !PageProperty(p));
+        //p->flags = 0;
+        //set_page_ref(p, 0);
+        list_add_before(le, &p->page_link);
     }
+    base->flags = 0;
+    set_page_ref(base, 0);
+    SetPageProperty(base);
+    base->property = n;
+
+    p = le2page(le, page_link);
+    /* chech if need to merge base and the following mem block */
+    if (base + n == p) {
+       base->property += p->property;
+       p->property = 0;
+    }
+    
+    le = list_prev(&base->page_link);
+    p = le2page(le, page_link);
+    /* check if need to merge base and previous mem block */
+    if (le != &free_list && p == base-1) {
+        while (le != &free_list) {
+            if (p->property) {
+                p->property += base->property;
+                base->property = 0;
+            }
+            le = list_prev(le);
+            p = le2page(le, page_link);
+        }
+    }
+    nr_free += n;
+#if 0
     base->property = n;
     SetPageProperty(base);
     list_entry_t *le = list_next(&free_list);
@@ -137,6 +183,7 @@ default_free_pages(struct Page *base, size_t n) {
     }
     nr_free += n;
     list_add(&free_list, &(base->page_link));
+#endif
 }
 
 static size_t
diff --git a/labcodes/lab2/kern/mm/pmm.c b/labcodes/lab2/kern/mm/pmm.c
index af54731..60a422b 100644
--- a/labcodes/lab2/kern/mm/pmm.c
+++ b/labcodes/lab2/kern/mm/pmm.c
@@ -380,6 +380,19 @@ get_pte(pde_t *pgdir, uintptr_t la, bool create) {
     }
     return NULL;          // (8) return page table entry
 #endif
+    pde_t *pdep = &pgdir[PDX(la)];
+
+    if (!(*pdep & PTE_P)) {
+        struct Page *p = NULL; 
+        if (!create || (p = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(p, 1);
+        uintptr_t pa = page2pa(p);
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_P | PTE_W | PTE_U;
+    }
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -425,6 +438,14 @@ page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
                                   //(6) flush tlb
     }
 #endif
+    if (*ptep & PTE_P) {
+        struct Page *p = pte2page(*ptep);
+        if (page_ref_dec(p) == 0) {
+            free_page(p);
+        }
+        *ptep = 0;
+        tlb_invalidate(pgdir, la);
+    }
 }
 
 //page_remove - free an Page which is related linear address la and has an validated pte
diff --git a/labcodes/lab2/kern/trap/trap.c b/labcodes/lab2/kern/trap/trap.c
index af78676..79c5364 100644
--- a/labcodes/lab2/kern/trap/trap.c
+++ b/labcodes/lab2/kern/trap/trap.c
@@ -46,6 +46,15 @@ idt_init(void) {
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
+    extern uintptr_t __vectors[];
+    int i;
+
+    /* setup idt table entries */
+    for (i = 0; i < sizeof(idt)/sizeof(idt[0]); i++) {
+        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
+    }
+    /* load idt table */
+    lidt(&idt_pd);
 }
 
 static const char *
@@ -134,6 +143,8 @@ print_regs(struct pushregs *regs) {
     cprintf("  eax  0x%08x\n", regs->reg_eax);
 }
 
+struct trapframe switchk2u, *switchu2k;
+
 /* trap_dispatch - dispatch based on what type of trap occurred */
 static void
 trap_dispatch(struct trapframe *tf) {
@@ -147,6 +158,9 @@ trap_dispatch(struct trapframe *tf) {
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
+        ticks++;
+        if (ticks % 100 == 0)
+            print_ticks();
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
